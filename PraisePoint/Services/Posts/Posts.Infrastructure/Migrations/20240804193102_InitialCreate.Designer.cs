// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Posts.Infrastructure.Persistence;

#nullable disable

namespace Posts.Infrastructure.Migrations
{
    [DbContext(typeof(PostContext))]
    [Migration("20240804193102_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Posts.Domain.Aggregates.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1000)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("Points");

                    b.Property<string>("ReceiverUsername")
                        .IsRequired()
                        .HasColumnType("VARCHAR(24)")
                        .HasColumnName("ReceiverUsername");

                    b.Property<string>("SenderUsername")
                        .IsRequired()
                        .HasColumnType("VARCHAR(24)")
                        .HasColumnName("SenderUsername");

                    b.HasKey("Id");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Posts.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("Text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR(24)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Posts.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR(24)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("Posts.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Posts.Domain.Aggregates.Post", null)
                        .WithMany("PostComments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Posts.Domain.Entities.Like", b =>
                {
                    b.HasOne("Posts.Domain.Aggregates.Post", null)
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Posts.Domain.Aggregates.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
